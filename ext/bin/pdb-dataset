#!/usr/bin/env bash

set -ueo pipefail

usage() { echo 'Usage: PDBBOX=BOX_DIR pdb-dataset import --timeshift-to now DUMPFILE'; }

misuse()
{
  usage 1>&2
  exit 1
}

if test "$#" -lt 1 -o -z "$PDBBOX"; then
  misuse
fi

test $# -gt 0 || misuse
command="$1"
shift 1

case "$command" in
  import)
    timeshift=''
    timeshiftsql=''
    dumpfile=''
    export PGUSER=puppetdb 

    while test $# -gt 0; do
      case "$1" in
        --timeshift-to)
          test $# -gt 0 || misuse
          timeshift="$2"
          shift 2
          ;;
        *)
          if [ -z "$dumpfile" ]; then
            dumpfile="$1"
            shift
          else
            echo "Unknown argument: $1" 1>&2
            misuse
          fi
      esac
    done

    if [ "$timeshift" = 'now' ]; then
      timshiftsql="now()"
    elif [[ $timeshift =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
      timshiftsql="TIMESTAMP '${timeshift}'"
    else
      echo "Invalid --timeshift value: $timeshift" 1>&2
      misuse
    fi

    echo "Checking for existing puppetdb database" 1>&2
    db_intialized=$(psql "puppetdb" -t -c "SELECT 1 FROM information_schema.tables WHERE table_name = 'schema_migrations';")

    if [ "$db_intialized" ]; then
      echo 'puppetdb database already exists' 1>&2
      exit 2
    fi

    echo "Restoring database from backup" 1>&2
    pg_restore --role=postgres --no-owner --no-acl -d puppetdb "$dumpfile" || echo $?

    db_exists=$(psql "puppetdb" -t -c "SELECT 1 FROM information_schema.tables WHERE table_name = 'schema_migrations';")

    if [ ! "$db_exists" ]; then
      echo 'Restore failed.' 1>&2
      exit 2
    fi

    tmpdir="$(mktemp -d "pdb-dataset-XXXXXX")"
    tmpdir="$(cd "$tmpdir" && pwd -P)"
    trap "$(printf 'rm -rf %q' "$tmpdir")" EXIT

cat > "$tmpdir/updatetime.sql" <<EOF
BEGIN;
DROP TABLE IF EXISTS max_report;

SELECT max(producer_timestamp)
INTO TEMPORARY TABLE max_report
FROM reports;

DROP TABLE IF EXISTS max_resource_event;

SELECT max(timestamp)
INTO TEMPORARY TABLE max_resource_event
FROM resource_events;

DROP TABLE IF EXISTS time_diff;

SELECT (DATE_PART('day', ${timshiftsql} - (select max from max_report)) * 24 +
        DATE_PART('hour', ${timshiftsql} - (select max from max_report))) * 60 +
        DATE_PART('minute', ${timshiftsql} - (select max from max_report)) as minute_diff
INTO TEMPORARY TABLE time_diff;

DROP TABLE IF EXISTS resource_events_time_diff;

SELECT (DATE_PART('day', ${timshiftsql} - (select max from max_resource_event)) * 24 +
        DATE_PART('hour', ${timshiftsql} - (select max from max_resource_event))) * 60 +
        DATE_PART('minute', ${timshiftsql} - (select max from max_resource_event)) as minute_diff
INTO TEMPORARY TABLE resource_events_time_diff;

UPDATE reports
  SET producer_timestamp = producer_timestamp + ((select minute_diff from time_diff) * INTERVAL '1 minute'),
  start_time = start_time + ((select minute_diff from time_diff) * INTERVAL '1 minute'),
  end_time = end_time + ((select minute_diff from time_diff) * INTERVAL '1 minute'),
  receive_time = receive_time + ((select minute_diff from time_diff) * INTERVAL '1 minute');

UPDATE resource_events
  SET timestamp = timestamp + ((select minute_diff from resource_events_time_diff) * INTERVAL '1 minute');

UPDATE catalogs
  SET producer_timestamp = producer_timestamp + ((select minute_diff from time_diff) * INTERVAL '1 minute'),
  timestamp = timestamp + ((select minute_diff from time_diff) * INTERVAL '1 minute');

UPDATE factsets
  SET producer_timestamp = producer_timestamp + ((select minute_diff from time_diff) * INTERVAL '1 minute'),
  timestamp = timestamp + ((select minute_diff from time_diff) * INTERVAL '1 minute');

DROP TABLE IF EXISTS time_diff;
DROP TABLE IF EXISTS max_report;
DROP TABLE IF EXISTS resource_events_time_diff;
DROP TABLE IF EXISTS max_resource_event;
COMMIT;
EOF

    echo "Updating data timestamps" 1>&2
    psql "puppetdb" -a -f "$tmpdir/updatetime.sql"

    echo "Running vacuum full on puppetdb database" 1>&2
    vacuumdb -f puppetdb

    echo "Finished" 1>&2

    ;;
  *)
    printf 'Unrecognized command: %q\n' "$command" 1>&2
    misuse
    ;;
esac
